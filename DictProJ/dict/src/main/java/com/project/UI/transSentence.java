package com.project.UI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.project.dictManagement.DictionaryCommandline;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.util.Locale;

public class transSentence extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JLabel labelTitle;
    private JPanel panelTarget;
    private JPanel panelTrans;
    private JLabel labelTarget;
    private JLabel labelTrans;
    private JTextArea textAreaTargetSentence;
    private JTextArea textAreaTransSentence;
    private JButton buttonSpeechTarget;
    private JButton buttonSpeechTrans;

    public transSentence() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        textAreaTargetSentence.setText(DictionaryApplication.sentence);
        textAreaTransSentence.setText(DictionaryCommandline.sentenceTranslator(DictionaryApplication.sentence));
        Border b = new LineBorder(new Color(152, 158, 161), 1);
        textAreaTransSentence.setBorder(b);
        textAreaTargetSentence.setBorder(b);


        buttonOK.addActionListener(e -> onOK());

        buttonCancel.addActionListener(e -> onCancel());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        buttonSpeechTarget.addActionListener(e -> DictionaryCommandline.speak(textAreaTargetSentence.getText()));
        buttonSpeechTrans.addActionListener(e -> DictionaryCommandline.speak(textAreaTransSentence.getText()));
    }

    private void onOK() {
        // add your code here
        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setBackground(new Color(-11711155));
        contentPane.setForeground(new Color(-4473925));
        contentPane.setPreferredSize(new Dimension(640, 480));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel2.setBackground(new Color(-12559704));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        buttonOK = new JButton();
        buttonOK.setBackground(new Color(-9805144));
        Font buttonOKFont = this.$$$getFont$$$("Consolas", -1, 18, buttonOK.getFont());
        if (buttonOKFont != null) buttonOK.setFont(buttonOKFont);
        buttonOK.setForeground(new Color(-4397831));
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setBackground(new Color(-9805144));
        Font buttonCancelFont = this.$$$getFont$$$("Consolas", -1, 18, buttonCancel.getFont());
        if (buttonCancelFont != null) buttonCancel.setFont(buttonCancelFont);
        buttonCancel.setForeground(new Color(-4397831));
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelTitle = new JLabel();
        Font labelTitleFont = this.$$$getFont$$$("Consolas", -1, 18, labelTitle.getFont());
        if (labelTitleFont != null) labelTitle.setFont(labelTitleFont);
        labelTitle.setForeground(new Color(-4397831));
        labelTitle.setText("Translation:");
        contentPane.add(labelTitle, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelTarget = new JPanel();
        panelTarget.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelTarget.setBackground(new Color(-12559704));
        contentPane.add(panelTarget, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelTarget.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        labelTarget = new JLabel();
        Font labelTargetFont = this.$$$getFont$$$("Consolas", -1, 18, labelTarget.getFont());
        if (labelTargetFont != null) labelTarget.setFont(labelTargetFont);
        labelTarget.setForeground(new Color(-4397831));
        labelTarget.setText("Target:");
        panelTarget.add(labelTarget, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textAreaTargetSentence = new JTextArea();
        textAreaTargetSentence.setBackground(new Color(-11711155));
        textAreaTargetSentence.setCaretColor(new Color(-21419));
        textAreaTargetSentence.setEditable(false);
        Font textAreaTargetSentenceFont = this.$$$getFont$$$("Consolas", -1, 18, textAreaTargetSentence.getFont());
        if (textAreaTargetSentenceFont != null) textAreaTargetSentence.setFont(textAreaTargetSentenceFont);
        textAreaTargetSentence.setForeground(new Color(-4397831));
        panelTarget.add(textAreaTargetSentence, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        buttonSpeechTarget = new JButton();
        buttonSpeechTarget.setBackground(new Color(-9805144));
        Font buttonSpeechTargetFont = this.$$$getFont$$$("Consolas", -1, 18, buttonSpeechTarget.getFont());
        if (buttonSpeechTargetFont != null) buttonSpeechTarget.setFont(buttonSpeechTargetFont);
        buttonSpeechTarget.setForeground(new Color(-4397831));
        buttonSpeechTarget.setLabel("Speech!");
        buttonSpeechTarget.setText("Speech!");
        panelTarget.add(buttonSpeechTarget, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelTrans = new JPanel();
        panelTrans.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelTrans.setBackground(new Color(-12559704));
        contentPane.add(panelTrans, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelTrans.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        labelTrans = new JLabel();
        Font labelTransFont = this.$$$getFont$$$("Consolas", -1, 18, labelTrans.getFont());
        if (labelTransFont != null) labelTrans.setFont(labelTransFont);
        labelTrans.setForeground(new Color(-4397831));
        labelTrans.setText("Translation:");
        panelTrans.add(labelTrans, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textAreaTransSentence = new JTextArea();
        textAreaTransSentence.setBackground(new Color(-11711155));
        textAreaTransSentence.setCaretColor(new Color(-21419));
        textAreaTransSentence.setEditable(false);
        Font textAreaTransSentenceFont = this.$$$getFont$$$("Consolas", -1, 18, textAreaTransSentence.getFont());
        if (textAreaTransSentenceFont != null) textAreaTransSentence.setFont(textAreaTransSentenceFont);
        textAreaTransSentence.setForeground(new Color(-4397831));
        textAreaTransSentence.setSelectedTextColor(new Color(-12559704));
        textAreaTransSentence.setSelectionColor(new Color(-4397831));
        panelTrans.add(textAreaTransSentence, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        buttonSpeechTrans = new JButton();
        buttonSpeechTrans.setBackground(new Color(-9805144));
        Font buttonSpeechTransFont = this.$$$getFont$$$("Consolas", -1, 18, buttonSpeechTrans.getFont());
        if (buttonSpeechTransFont != null) buttonSpeechTrans.setFont(buttonSpeechTransFont);
        buttonSpeechTrans.setForeground(new Color(-4397831));
        buttonSpeechTrans.setText("Speech!");
        panelTrans.add(buttonSpeechTrans, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
