package com.project.UI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.project.dictManagement.*;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.util.Locale;

public class delWord extends JDialog {
    private JPanel contentPane;
    private JButton buttonApply;
    private JButton buttonCancel;
    private JLabel labelDeleteWord;
    private JPanel panelContext;
    private JLabel input;
    private JTextField delWordText;
    private JPanel panelSuggestion;
    private JLabel labelSuggestion;
    private JList<String> listSuggestion;

    public delWord() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonApply);

        buttonApply.addActionListener(e -> onOK());

        buttonCancel.addActionListener(e -> onCancel());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        delWordText.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                super.keyReleased(e);
                DefaultListModel<String> listModel = new DefaultListModel<>();
                String s = delWordText.getText();
                listModel.addAll(DictionaryManagement.stringSimilarWord(s));
                listSuggestion.setModel(listModel);
            }
        });

        listSuggestion.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                delWordText.setText(listSuggestion.getSelectedValue());
            }
        });

    }

    private void onOK() {
        int confirm = JOptionPane.showConfirmDialog(contentPane, "This action will make the database change!\n" +
                "Are you sure about deleting this word from dictionary?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            if (!DictionaryCommandline.deleteWord(DictionaryManagement.myTrie.findWordId(delWordText.getText()))) {
                JOptionPane.showMessageDialog(contentPane, "Word\"" + delWordText.getText() + "\"" + "is existed!");
            } else {
                JOptionPane.showMessageDialog(contentPane, "Word\"" + delWordText.getText() + "\"" + "was deleted successfully!");
            }
            dispose();
        }

    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void main(String[] args) {
        delWord dialog = new delWord();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 2, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setBackground(new Color(-11711155));
        contentPane.setPreferredSize(new Dimension(640, 480));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel2.setBackground(new Color(-12559704));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        buttonApply = new JButton();
        buttonApply.setBackground(new Color(-9805144));
        Font buttonApplyFont = this.$$$getFont$$$("Consolas", -1, 18, buttonApply.getFont());
        if (buttonApplyFont != null) buttonApply.setFont(buttonApplyFont);
        buttonApply.setForeground(new Color(-4397831));
        buttonApply.setText("Apply");
        panel2.add(buttonApply, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setBackground(new Color(-9805144));
        Font buttonCancelFont = this.$$$getFont$$$("Consolas", -1, 18, buttonCancel.getFont());
        if (buttonCancelFont != null) buttonCancel.setFont(buttonCancelFont);
        buttonCancel.setForeground(new Color(-4397831));
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelContext = new JPanel();
        panelContext.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelContext.setBackground(new Color(-12559704));
        contentPane.add(panelContext, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelContext.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        input = new JLabel();
        Font inputFont = this.$$$getFont$$$("Consolas", -1, 18, input.getFont());
        if (inputFont != null) input.setFont(inputFont);
        input.setForeground(new Color(-4397831));
        input.setText(" Input:");
        panelContext.add(input, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        delWordText = new JTextField();
        delWordText.setBackground(new Color(-11711155));
        delWordText.setCaretColor(new Color(-21419));
        Font delWordTextFont = this.$$$getFont$$$("Consolas", -1, 18, delWordText.getFont());
        if (delWordTextFont != null) delWordText.setFont(delWordTextFont);
        delWordText.setForeground(new Color(-4397831));
        panelContext.add(delWordText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        labelDeleteWord = new JLabel();
        Font labelDeleteWordFont = this.$$$getFont$$$("Consolas", -1, 18, labelDeleteWord.getFont());
        if (labelDeleteWordFont != null) labelDeleteWord.setFont(labelDeleteWordFont);
        labelDeleteWord.setForeground(new Color(-4397831));
        labelDeleteWord.setText("Delete an existing word:");
        contentPane.add(labelDeleteWord, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelSuggestion = new JPanel();
        panelSuggestion.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelSuggestion.setBackground(new Color(-12559704));
        contentPane.add(panelSuggestion, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(600, 300), null, 0, false));
        panelSuggestion.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        labelSuggestion = new JLabel();
        Font labelSuggestionFont = this.$$$getFont$$$("Consolas", -1, 18, labelSuggestion.getFont());
        if (labelSuggestionFont != null) labelSuggestion.setFont(labelSuggestionFont);
        labelSuggestion.setForeground(new Color(-4397831));
        labelSuggestion.setText(" Available Suggestions:");
        labelSuggestion.setVerticalAlignment(0);
        labelSuggestion.setVerticalTextPosition(0);
        panelSuggestion.add(labelSuggestion, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panelSuggestion.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        listSuggestion = new JList();
        listSuggestion.setBackground(new Color(-11711155));
        Font listSuggestionFont = this.$$$getFont$$$("Consolas", -1, 18, listSuggestion.getFont());
        if (listSuggestionFont != null) listSuggestion.setFont(listSuggestionFont);
        listSuggestion.setForeground(new Color(-4397831));
        listSuggestion.setSelectionBackground(new Color(-4397831));
        listSuggestion.setSelectionForeground(new Color(-12559704));
        listSuggestion.setSelectionMode(1);
        panelSuggestion.add(listSuggestion, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
