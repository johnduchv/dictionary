package com.project.UI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.project.dictManagement.*;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;


public class transWord extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonEdit;
    private JPanel buttonPanel;
    private JPanel definitionPanel;
    private JTextPane textPaneDefinition;
    private JLabel labelTitle;
    private JButton buttonSpeech;
    private String targetWord;


    public transWord() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        targetWord = DictionaryApplication.transStr;
        setDefinitionText();

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonEdit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onEdit();
            }
        });

        buttonSpeech.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DictionaryCommandline.speak(targetWord);
            }
        });
    }

    private void onOK() {
        // add your code here
        dispose();
    }

    private void onEdit() {
        // add your code here if necessary
        DictionaryApplication.editStr = targetWord;
        DictionaryApplication.editDefinition = textPaneDefinition.getText();
        System.out.println(DictionaryApplication.editDefinition);
        completeWord dialog = new completeWord();
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
        dispose();
    }


    private void setDefinitionText() {
        textPaneDefinition.setContentType("text/html");
        Pair<String, String> wordAndHtml = DictionaryCommandline.getExactWord(DictionaryApplication.transStr);
        textPaneDefinition.setText(wordAndHtml.getValue());
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.setBackground(new Color(-12559704));
        contentPane.setForeground(new Color(-4473925));
        contentPane.setPreferredSize(new Dimension(640, 480));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        buttonPanel.setBackground(new Color(-12559704));
        contentPane.add(buttonPanel, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        buttonPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        buttonOK = new JButton();
        buttonOK.setBackground(new Color(-9805144));
        Font buttonOKFont = this.$$$getFont$$$("Consolas", -1, 18, buttonOK.getFont());
        if (buttonOKFont != null) buttonOK.setFont(buttonOKFont);
        buttonOK.setForeground(new Color(-4397831));
        buttonOK.setText("OK");
        buttonPanel.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonEdit = new JButton();
        buttonEdit.setBackground(new Color(-9805144));
        Font buttonEditFont = this.$$$getFont$$$("Consolas", -1, 18, buttonEdit.getFont());
        if (buttonEditFont != null) buttonEdit.setFont(buttonEditFont);
        buttonEdit.setForeground(new Color(-4397831));
        buttonEdit.setText("Edit this word!");
        buttonPanel.add(buttonEdit, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        definitionPanel = new JPanel();
        definitionPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        definitionPanel.setBackground(new Color(-12559704));
        contentPane.add(definitionPanel, new GridConstraints(1, 0, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, -1), null, 0, false));
        definitionPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16053)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JScrollPane scrollPane1 = new JScrollPane();
        definitionPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textPaneDefinition = new JTextPane();
        textPaneDefinition.setBackground(new Color(-4397831));
        textPaneDefinition.setCaretColor(new Color(-21419));
        textPaneDefinition.setDisabledTextColor(new Color(-52377));
        textPaneDefinition.setEditable(false);
        Font textPaneDefinitionFont = this.$$$getFont$$$("Consolas", -1, 12, textPaneDefinition.getFont());
        if (textPaneDefinitionFont != null) textPaneDefinition.setFont(textPaneDefinitionFont);
        textPaneDefinition.setForeground(new Color(-4397831));
        textPaneDefinition.setPreferredSize(new Dimension(7, 28));
        textPaneDefinition.setSelectedTextColor(new Color(-4397831));
        textPaneDefinition.setSelectionColor(new Color(-16777216));
        textPaneDefinition.setText("");
        scrollPane1.setViewportView(textPaneDefinition);
        buttonSpeech = new JButton();
        buttonSpeech.setBackground(new Color(-9805144));
        buttonSpeech.setFocusable(false);
        Font buttonSpeechFont = this.$$$getFont$$$("Consolas", -1, 13, buttonSpeech.getFont());
        if (buttonSpeechFont != null) buttonSpeech.setFont(buttonSpeechFont);
        buttonSpeech.setForeground(new Color(-4397831));
        buttonSpeech.setHorizontalAlignment(0);
        buttonSpeech.setHorizontalTextPosition(11);
        buttonSpeech.setIconTextGap(0);
        buttonSpeech.setText("Speech");
        buttonSpeech.setVerticalAlignment(0);
        definitionPanel.add(buttonSpeech, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(80, 30), new Dimension(80, 30), new Dimension(80, 30), 0, false));
        labelTitle = new JLabel();
        Font labelTitleFont = this.$$$getFont$$$("Consolas", -1, 18, labelTitle.getFont());
        if (labelTitleFont != null) labelTitle.setFont(labelTitleFont);
        labelTitle.setForeground(new Color(-4397831));
        labelTitle.setText("Translation:");
        contentPane.add(labelTitle, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(-1, 50), null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(-1, 10), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
