package com.project.UI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.project.dictManagement.*;


import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.util.Locale;

public class completeWord extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JLabel labelEdit;
    private JPanel panelEdit;
    private JPanel panelEditPronounce;
    private JLabel labelTargetWord;
    private JPanel panelEditDefinition;
    private JLabel labelPronounce;
    private JLabel labelEditDefinition;
    private JEditorPane editorPaneEditDefinition;
    private JLabel labelTarget;
    private JLabel labelWord;
    private JTextField textFieldEditPronounce;

    public completeWord() {

        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        labelWord.setText(DictionaryApplication.editStr);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onOK() {
        int confirm = JOptionPane.showConfirmDialog(contentPane, "This action will make the database change!\n" +
                "Are you sure about editing this word in dictionary?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            if (DictionaryCommandline.deleteWord(DictionaryManagement.myTrie.findWordId(labelWord.getText()))
                    && DictionaryCommandline.insertWord(labelWord.getText(),
                    textFieldEditPronounce.getText(), editorPaneEditDefinition.getText())) {
                JOptionPane.showMessageDialog(contentPane, "Word\"" + labelWord.getText() + "\"" + "was edited successfully!");
            }
            dispose();
        }
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setBackground(new Color(-11711155));
        contentPane.setPreferredSize(new Dimension(680, 480));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel2.setBackground(new Color(-12559704));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        buttonOK = new JButton();
        buttonOK.setBackground(new Color(-9805144));
        Font buttonOKFont = this.$$$getFont$$$("Consolas", -1, 18, buttonOK.getFont());
        if (buttonOKFont != null) buttonOK.setFont(buttonOKFont);
        buttonOK.setForeground(new Color(-4397831));
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setBackground(new Color(-9805144));
        Font buttonCancelFont = this.$$$getFont$$$("Consolas", -1, 16, buttonCancel.getFont());
        if (buttonCancelFont != null) buttonCancel.setFont(buttonCancelFont);
        buttonCancel.setForeground(new Color(-4397831));
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelEdit = new JLabel();
        Font labelEditFont = this.$$$getFont$$$("Consolas", -1, 18, labelEdit.getFont());
        if (labelEditFont != null) labelEdit.setFont(labelEditFont);
        labelEdit.setForeground(new Color(-4397831));
        labelEdit.setText("Edit Definition and Pronunciation:");
        contentPane.add(labelEdit, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelEdit = new JPanel();
        panelEdit.setLayout(new GridLayoutManager(3, 16, new Insets(0, 0, 0, 0), -1, -1));
        panelEdit.setBackground(new Color(-12559704));
        contentPane.add(panelEdit, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelEdit.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-1)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panelEditPronounce = new JPanel();
        panelEditPronounce.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelEditPronounce.setBackground(new Color(-12559704));
        panelEdit.add(panelEditPronounce, new GridConstraints(1, 0, 1, 16, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelEditPronounce.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        labelPronounce = new JLabel();
        Font labelPronounceFont = this.$$$getFont$$$("Consolas", -1, 18, labelPronounce.getFont());
        if (labelPronounceFont != null) labelPronounce.setFont(labelPronounceFont);
        labelPronounce.setForeground(new Color(-4397831));
        labelPronounce.setText("Edit pronounciation:");
        panelEditPronounce.add(labelPronounce, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textFieldEditPronounce = new JTextField();
        textFieldEditPronounce.setBackground(new Color(-11711155));
        textFieldEditPronounce.setCaretColor(new Color(-21419));
        Font textFieldEditPronounceFont = this.$$$getFont$$$("Consolas", -1, 18, textFieldEditPronounce.getFont());
        if (textFieldEditPronounceFont != null) textFieldEditPronounce.setFont(textFieldEditPronounceFont);
        textFieldEditPronounce.setForeground(new Color(-4397831));
        panelEditPronounce.add(textFieldEditPronounce, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        panelEditDefinition = new JPanel();
        panelEditDefinition.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelEditDefinition.setBackground(new Color(-12559704));
        panelEdit.add(panelEditDefinition, new GridConstraints(2, 0, 1, 16, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelEditDefinition.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-6236)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        labelEditDefinition = new JLabel();
        labelEditDefinition.setBackground(new Color(-11711155));
        Font labelEditDefinitionFont = this.$$$getFont$$$("Consolas", -1, 18, labelEditDefinition.getFont());
        if (labelEditDefinitionFont != null) labelEditDefinition.setFont(labelEditDefinitionFont);
        labelEditDefinition.setForeground(new Color(-4397831));
        labelEditDefinition.setText("Edit definition:");
        panelEditDefinition.add(labelEditDefinition, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editorPaneEditDefinition = new JEditorPane();
        editorPaneEditDefinition.setBackground(new Color(-11711155));
        editorPaneEditDefinition.setCaretColor(new Color(-21419));
        Font editorPaneEditDefinitionFont = this.$$$getFont$$$("Consolas", -1, 18, editorPaneEditDefinition.getFont());
        if (editorPaneEditDefinitionFont != null) editorPaneEditDefinition.setFont(editorPaneEditDefinitionFont);
        editorPaneEditDefinition.setForeground(new Color(-4397831));
        editorPaneEditDefinition.setSelectedTextColor(new Color(-12559704));
        editorPaneEditDefinition.setSelectionColor(new Color(-4397831));
        panelEditDefinition.add(editorPaneEditDefinition, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        labelTarget = new JLabel();
        Font labelTargetFont = this.$$$getFont$$$("Consolas", -1, 18, labelTarget.getFont());
        if (labelTargetFont != null) labelTarget.setFont(labelTargetFont);
        labelTarget.setForeground(new Color(-4397831));
        labelTarget.setText("Target: ");
        panelEdit.add(labelTarget, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelWord = new JLabel();
        Font labelWordFont = this.$$$getFont$$$("Consolas", -1, 18, labelWord.getFont());
        if (labelWordFont != null) labelWord.setFont(labelWordFont);
        labelWord.setForeground(new Color(-4397831));
        labelWord.setText("Label");
        labelWord.setVerticalAlignment(0);
        panelEdit.add(labelWord, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
